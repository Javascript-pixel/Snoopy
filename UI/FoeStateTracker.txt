var MaxListLength = 5

var CheckingDamage  = true
var CheckingHealing = true
var CheckingDebuffs = true
var CheckingFoeBuffs= true



/*///////////////////////////////////
FoeStateTracker v4.1

This is a simple script that will list the last 5 previous enemy states and times.
You can adjust the number of states that are retained with the variable MaxListLength.

```````````````````
import UI/FoeStateTracker
.MaxListLength = 10
````````````````````

This version will also track other events and display them with reference to foe state and time.
Currently it tracks:
  When damage is received
  When healing is received
  When the player is debuffed
  When the foe is buffed

 - Incoherent Toast
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

var StateList = []
var StateListText
var TimeListText
var StateListBox
var init = true
var Mobile = sys.isMobile
var Defense = 0
var PHealth = hp
var EventRecorder = []
var EventDisplayText
var DebuffCount = 0
var FoeBuffCount = 0
var DragButton
var Label
var DragCont = import UI/DragController
var ToggleDragging = false
var XSet = storage.Get("X",0)
var YSet = storage.Get("Y",7)
var StyleInvisible = ui.AddStyle("
^###
^###
^###")


func Create_UI_Element(UI,X,Y,W)
  UI.x = X
  UI.y = Y
  UI.w = W
  UI.dock = top_left
  UI.anchor = top_left
  return UI

var z
?totaltime = 1 | init
  init = false
  EventRecorder.Clear()
  StateList.Clear()
  StateListBox = Create_UI_Element( ui.AddPanel(), XSet,YSet,9)
  StateListBox.h = 2+MaxListLength

  z = ""
  for a = 1..MaxListLength
    z += "\n│"
  Label = Create_UI_Element( ui.AddText("S : T"+z),-5,0,20)
  Label.align = center
  Label.color = #808080

  StateListText = Create_UI_Element( ui.AddText(),1,1,20)
  StateListText.align = left

  TimeListText =  Create_UI_Element( ui.AddText(),5,1,20)
  TimeListText.align = left

  EventDisplayText =  Create_UI_Element( ui.AddText(),0,2+MaxListLength,99)
  EventDisplayText.align = left

  DragButton = Create_UI_Element( ui.AddButton() ,-1,0,3)
  DragButton.h = 1
  DragButton.text = "ʘ"
  DragButton.style = StyleInvisible
  DragButton.SetDown(DragToggle)

  StateListBox.Add(Label)
  StateListBox.Add(StateListText)
  StateListBox.Add(TimeListText)
  StateListBox.Add(EventDisplayText)
  StateListBox.Add(DragButton)

func ClearStorage()
  storage.Delete("X")
  storage.Delete("Y")

func DragToggle()
  ToggleDragging = !ToggleDragging

?ToggleDragging
  XSet = math.Clamp(input.x, 0, screen.w)
  YSet = math.Clamp(input.y, 1, screen.h-1)
  StateListBox.x = XSet
  StateListBox.y = YSet
  ?key ! "primary"
    ToggleDragging = false
    storage.Set("X",XSet)
    storage.Set("Y",YSet)

var Math
func CheckDamage()
  Math = hp + armor + armor.f/10.0
  ?Math + 0.5 < Defense
    EventRecorder.Add(["Received "+math.RoundToInt(10*(Defense - Math))/10.0+" damage at: ",foe.state,foe.time,totaltime])
    UpdateEventDisplay()
  Defense = Math

func CheckHealing()
  ?hp > PHealth
    EventRecorder.Add(["Healed " + (hp-PHealth) + " hp at: ",foe.state,foe.time,totaltime])
    UpdateEventDisplay()
  PHealth = hp

func CheckDebuffs()
  ?debuffs.count > DebuffCount
    EventRecorder.Add(["Received debuff at: ",foe.state,foe.time,totaltime])
    UpdateEventDisplay()
  DebuffCount = debuffs.count

func CheckFoeBuffs()
  ?foe.buffs.count > FoeBuffCount
    EventRecorder.Add(["Foe received buff at: ",foe.state,foe.time,totaltime])
    UpdateEventDisplay()
  :?foe.buffs.count < FoeBuffCount
    EventRecorder.Add(["Foe lost buff at: ",foe.state,foe.time,totaltime])
    UpdateEventDisplay()
  FoeBuffCount = foe.buffs.count

?CheckingDamage
  CheckDamage()
?CheckingHealing
  CheckHealing()
?CheckingDebuffs
  CheckDebuffs()
?CheckingFoeBuffs
  CheckFoeBuffs()

func UpdateTimeText()
  var Times = ""
  for i =0..StateList.Count()-1
    Times += StateList[i][1] + "\n"
  TimeListText.text = Times

func UpdateStateText()
  var States = ""
  for i =0..StateList.Count()-1
    States += StateList[i][0] + "\n"
  StateListText.text = States

func UpdateTimeListText()
  TimeListText.text = foe.state + "," + foe.time

func UpdateEventDisplay()
  var TempText = ""
  for a : EventRecorder
    TempText = TempText + a[0] + a[1] + ":" + a[2] + "\n"
  EventDisplayText.text = TempText

func CheckEventTimers()
  ?EventRecorder[0][3] + 50 < totaltime
    EventRecorder.RemoveAt(0)
    UpdateEventDisplay()

func CheckListMax()
  ?StateList.Count() > MaxListLength
    for a = MaxListLength..StateList.Count()-1
      StateList.RemoveAt(MaxListLength)

?StateList.Count()
  ?foe.state ! StateList[0][0]
    StateList.Insert(0,[foe.state,foe.time])
    CheckListMax()
    UpdateStateText()
    UpdateTimeText()
  :?foe.time ! StateList[0][1]
    StateList[0].Emplace(1,foe.time)
    UpdateTimeText()
:?foe.distance < 30
  StateList.Add([foe.state,foe.time])
  UpdateStateText()
  UpdateTimeText()

?StateListBox.h ! 2+MaxListLength
  StateListBox.Recycle()
  init = true

?EventRecorder.Count()
  CheckEventTimers()